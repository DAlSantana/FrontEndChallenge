{"ast":null,"code":"import _asyncToGenerator from \"/Users/diegosantana/Documents/FrontEnd/FrontEndChallenge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ChartDto } from \"src/models/chartDto\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../proxy/proxy.service\";\nexport class AdapterSetvice {\n  constructor(proxyService) {\n    this.proxyService = proxyService;\n  }\n  getStockValues(stock, interval, range) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.proxyService.consultStockVaration(stock, interval, range).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (res) {\n          console.log(res);\n          _this.data = res;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      return _this.converterchartServiceToChartDto();\n    })();\n  }\n  converterchartServiceToChartDto() {\n    const chartDto = new ChartDto(this.data.chart.result[0].indicators.quote[0].open, this.data.chart.result[0].timestamp);\n    return chartDto;\n  }\n}\nAdapterSetvice.ɵfac = function AdapterSetvice_Factory(t) {\n  return new (t || AdapterSetvice)(i0.ɵɵinject(i1.ProxyService));\n};\nAdapterSetvice.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdapterSetvice,\n  factory: AdapterSetvice.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";AACA,SAASA,QAAQ,QAAQ,qBAAqB;;;AAO9C,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAiB;EACpCC,cAAcA,CACzBC,KAAa,EACbC,QAAkB,EAClBC,KAAY;IAAA;IAAA;MAEZ,MAAMC,KAAI,CAACL,YAAY,CACpBM,oBAAoB,CAACJ,KAAK,EAAEC,QAAQ,EAAEC,KAAK,CAAC,CAC5CG,SAAS;QAAA,6BAAC,WAAOC,GAAQ,EAAI;UAC5BC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;UAChBH,KAAI,CAACM,IAAI,GAAGH,GAAG;QACjB,CAAC;QAAA;UAAA;QAAA;MAAA,IAAC;MACJ,OAAOH,KAAI,CAACO,+BAA+B,EAAE;IAAC;EAChD;EACOA,+BAA+BA;IACpC,MAAMC,QAAQ,GAAG,IAAIhB,QAAQ,CAC3B,IAAI,CAACc,IAAI,CAACG,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,EAClD,IAAI,CAACP,IAAI,CAACG,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACI,SAAS,CACpC;IACD,OAAON,QAAQ;EACjB;;AAtBWf,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;EAAAuB,YAFb;AAAM","names":["ChartDto","AdapterSetvice","constructor","proxyService","getStockValues","stock","interval","range","_this","consultStockVaration","subscribe","res","console","log","data","converterchartServiceToChartDto","chartDto","chart","result","indicators","quote","open","timestamp","factory","providedIn"],"sourceRoot":"","sources":["/Users/diegosantana/Documents/FrontEnd/FrontEndChallenge/src/acl/adapter/adapter.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ChartDto } from \"src/models/chartDto\";\nimport { Interval } from \"src/models/interval.enum\";\nimport { Range } from \"src/models/range.enum\";\nimport { ProxyService } from \"../proxy/proxy.service\";\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AdapterSetvice {\n  private data: any;\n  constructor(private proxyService: ProxyService) {}\n  public async getStockValues(\n    stock: string,\n    interval: Interval,\n    range: Range\n  ): any {\n    await this.proxyService\n      .consultStockVaration(stock, interval, range)\n      .subscribe(async (res: any) => {\n        console.log(res);\n        this.data = res;\n      });\n    return this.converterchartServiceToChartDto();\n  }\n  public converterchartServiceToChartDto(): ChartDto {\n    const chartDto = new ChartDto(\n      this.data.chart.result[0].indicators.quote[0].open,\n      this.data.chart.result[0].timestamp\n    );\n    return chartDto;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}