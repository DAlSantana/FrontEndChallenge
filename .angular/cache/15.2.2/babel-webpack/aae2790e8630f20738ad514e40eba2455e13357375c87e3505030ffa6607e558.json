{"ast":null,"code":"import { Chart } from \"chart.js\";\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"meuCanvas\"];\nexport class QuoteChartComponent {\n  constructor() {\n    this.elemento = {};\n  }\n  ngOnInit() {\n    new Chart(this.elemento.nativeElement, {\n      type: \"line\",\n      data: {\n        labels: this.chartData.stockDates,\n        datasets: [{\n          data: this.chartData.stockValues,\n          borderColor: \"#000\",\n          fill: false,\n          label: \"Variação\"\n        }]\n      },\n      options: {\n        plugins: {\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                let label = \"\";\n                console.log(context.parsed);\n                if (label) {\n                  label += \": \";\n                }\n                if (context.parsed.y !== null) {\n                  label += new Intl.NumberFormat(\"pt-BR\", {\n                    style: \"currency\",\n                    currency: \"BRL\"\n                  }).format(context.parsed.y);\n                }\n                return label;\n              }\n            }\n          }\n        }\n      }\n    });\n    console.log(this.chartData);\n  }\n}\nQuoteChartComponent.ɵfac = function QuoteChartComponent_Factory(t) {\n  return new (t || QuoteChartComponent)();\n};\nQuoteChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: QuoteChartComponent,\n  selectors: [[\"app-quote-chart\"]],\n  viewQuery: function QuoteChartComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.elemento = _t.first);\n    }\n  },\n  inputs: {\n    chartData: \"chartData\"\n  },\n  decls: 3,\n  vars: 0,\n  consts: [[\"meuCanvas\", \"\"]],\n  template: function QuoteChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"canvas\", null, 0);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,KAAK,QAAQ,UAAU;;;AAQhC,OAAM,MAAOC,mBAAmB;EAK9BC;IAF0C,aAAQ,GAAG,EAAgB;EAEtD;EAEfC,QAAQA;IACN,IAAIH,KAAK,CAAC,IAAI,CAACI,QAAQ,CAACC,aAAa,EAAE;MACrCC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE;QACJC,MAAM,EAAE,IAAI,CAACC,SAAS,CAACC,UAAU;QACjCC,QAAQ,EAAE,CACR;UACEJ,IAAI,EAAE,IAAI,CAACE,SAAS,CAACG,WAAW;UAChCC,WAAW,EAAE,MAAM;UACnBC,IAAI,EAAE,KAAK;UACXC,KAAK,EAAE;SACR;OAEJ;MAEDC,OAAO,EAAE;QACPC,OAAO,EAAE;UACPC,OAAO,EAAE;YACPC,SAAS,EAAE;cACTJ,KAAK,EAAE,UAAUK,OAAO;gBACtB,IAAIL,KAAK,GAAG,EAAE;gBACdM,OAAO,CAACC,GAAG,CAACF,OAAO,CAACG,MAAM,CAAC;gBAE3B,IAAIR,KAAK,EAAE;kBACTA,KAAK,IAAI,IAAI;;gBAEf,IAAIK,OAAO,CAACG,MAAM,CAACC,CAAC,KAAK,IAAI,EAAE;kBAC7BT,KAAK,IAAI,IAAIU,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;oBACtCC,KAAK,EAAE,UAAU;oBACjBC,QAAQ,EAAE;mBACX,CAAC,CAACC,MAAM,CAACT,OAAO,CAACG,MAAM,CAACC,CAAC,CAAC;;gBAE7B,OAAOT,KAAK;cACd;;;;;KAKT,CAAC;IACFM,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,SAAS,CAAC;EAC7B;;AA/CWR,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAA6B;EAAAC;IAAA;;;;;;;;;;;;;;;;MCThCC,2BAAK;MACHA,kCAA4B;MAC9BA,iBAAM","names":["Chart","QuoteChartComponent","constructor","ngOnInit","elemento","nativeElement","type","data","labels","chartData","stockDates","datasets","stockValues","borderColor","fill","label","options","plugins","tooltip","callbacks","context","console","log","parsed","y","Intl","NumberFormat","style","currency","format","selectors","viewQuery","i0"],"sourceRoot":"","sources":["/Users/diegosantana/Documents/FrontEnd/FrontEndChallenge/src/components/quote-chart/quote-chart.component.ts","/Users/diegosantana/Documents/FrontEnd/FrontEndChallenge/src/components/quote-chart/quote-chart.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild, ElementRef, Input } from \"@angular/core\";\nimport { Chart } from \"chart.js\";\nimport { ChartDto } from \"src/models/chartDto\";\nimport { TimeConverter } from \"src/utils/timeConverter\";\n@Component({\n  selector: \"app-quote-chart\",\n  templateUrl: \"./quote-chart.component.html\",\n  styleUrls: [\"./quote-chart.component.scss\"],\n})\nexport class QuoteChartComponent {\n  @Input() chartData: any;\n\n  @ViewChild(\"meuCanvas\", { static: true }) elemento = {} as ElementRef;\n\n  constructor() {}\n\n  ngOnInit() {\n    new Chart(this.elemento.nativeElement, {\n      type: \"line\",\n      data: {\n        labels: this.chartData.stockDates,\n        datasets: [\n          {\n            data: this.chartData.stockValues,\n            borderColor: \"#000\",\n            fill: false,\n            label: \"Variação\",\n          },\n        ],\n      },\n\n      options: {\n        plugins: {\n          tooltip: {\n            callbacks: {\n              label: function (context) {\n                let label = \"\";\n                console.log(context.parsed);\n\n                if (label) {\n                  label += \": \";\n                }\n                if (context.parsed.y !== null) {\n                  label += new Intl.NumberFormat(\"pt-BR\", {\n                    style: \"currency\",\n                    currency: \"BRL\",\n                  }).format(context.parsed.y);\n                }\n                return label;\n              },\n            },\n          },\n        },\n      },\n    });\n    console.log(this.chartData);\n  }\n}\n","<div>\n  <canvas #meuCanvas></canvas>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}