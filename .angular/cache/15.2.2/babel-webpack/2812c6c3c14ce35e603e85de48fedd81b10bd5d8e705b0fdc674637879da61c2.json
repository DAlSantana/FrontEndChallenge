{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { ChartDto } from \"src/models/chartDto\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../proxy/proxy.service\";\nexport class AdapterSetvice {\n  constructor(proxyService) {\n    this.proxyService = proxyService;\n  }\n  getStockValues(stock, interval, range) {\n    var subject = new Subject();\n    this.proxyService.consultStockVaration(stock, interval, range).subscribe(res => {\n      this.data = res;\n      subject.next(res);\n    });\n    return subject.asObservable();\n  }\n  converterchartServiceToChartDto() {\n    const chartDto = new ChartDto(this.data.chart.result[0].indicators.quote[0].open, this.data.chart.result[0].timestamp);\n    return chartDto;\n  }\n}\nAdapterSetvice.ɵfac = function AdapterSetvice_Factory(t) {\n  return new (t || AdapterSetvice)(i0.ɵɵinject(i1.ProxyService));\n};\nAdapterSetvice.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdapterSetvice,\n  factory: AdapterSetvice.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;AAC9B,SAASC,QAAQ,QAAQ,qBAAqB;;;AAO9C,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAiB;EAC1CC,cAAcA,CAACC,KAAa,EAAEC,QAAkB,EAAEC,KAAY;IACnE,IAAIC,OAAO,GAAG,IAAIT,OAAO,EAAO;IAEhC,IAAI,CAACI,YAAY,CACdM,oBAAoB,CAACJ,KAAK,EAAEC,QAAQ,EAAEC,KAAK,CAAC,CAC5CG,SAAS,CAAEC,GAAG,IAAI;MACjB,IAAI,CAACC,IAAI,GAAGD,GAAG;MACfH,OAAO,CAACK,IAAI,CAACF,GAAG,CAAC;IACnB,CAAC,CAAC;IACJ,OAAOH,OAAO,CAACM,YAAY,EAAE;EAC/B;EACOC,+BAA+BA;IACpC,MAAMC,QAAQ,GAAG,IAAIhB,QAAQ,CAC3B,IAAI,CAACY,IAAI,CAACK,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,EAClD,IAAI,CAACT,IAAI,CAACK,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACI,SAAS,CACpC;IACD,OAAON,QAAQ;EACjB;;AApBWf,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;EAAAuB,YAFb;AAAM","names":["Subject","ChartDto","AdapterSetvice","constructor","proxyService","getStockValues","stock","interval","range","subject","consultStockVaration","subscribe","res","data","next","asObservable","converterchartServiceToChartDto","chartDto","chart","result","indicators","quote","open","timestamp","factory","providedIn"],"sourceRoot":"","sources":["/Users/diegosantana/Documents/FrontEnd/FrontEndChallenge/src/acl/adapter/adapter.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { ChartDto } from \"src/models/chartDto\";\nimport { Interval } from \"src/models/interval.enum\";\nimport { Range } from \"src/models/range.enum\";\nimport { ProxyService } from \"../proxy/proxy.service\";\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AdapterSetvice {\n  private data: any;\n  constructor(private proxyService: ProxyService) {}\n  public getStockValues(stock: string, interval: Interval, range: Range) {\n    var subject = new Subject<any>();\n\n    this.proxyService\n      .consultStockVaration(stock, interval, range)\n      .subscribe((res) => {\n        this.data = res;\n        subject.next(res);\n      });\n    return subject.asObservable();\n  }\n  public converterchartServiceToChartDto(): ChartDto {\n    const chartDto = new ChartDto(\n      this.data.chart.result[0].indicators.quote[0].open,\n      this.data.chart.result[0].timestamp\n    );\n    return chartDto;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}