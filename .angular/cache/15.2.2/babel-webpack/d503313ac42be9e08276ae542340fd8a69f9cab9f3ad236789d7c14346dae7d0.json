{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { ChartDto } from \"src/models/chartDto\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../proxy/proxy.service\";\nimport * as i2 from \"src/utils/timeConverter\";\nexport class AdapterSetvice {\n  constructor(proxyService, timeConverterService) {\n    this.proxyService = proxyService;\n    this.timeConverterService = timeConverterService;\n    this.subject = new Subject();\n    this.subJectDto = new Subject();\n  }\n  getStockValues(stock, interval, range) {\n    this.proxyService.consultStockVaration(stock, interval, range).subscribe(res => {\n      this.subject.next(res);\n    });\n    return this.converterchartServiceToChartDto();\n  }\n  converterchartServiceToChartDto() {\n    let chartDto;\n    this.subject.subscribe(sub => {\n      sub.chart.result[0].timestamp.map(timeUnformated => this.timeConverterService(timeUnformated));\n      chartDto = new ChartDto(sub.chart.result[0].indicators.quote[0].open, sub.chart.result[0].timestamp);\n      this.subJectDto.next(chartDto);\n    });\n    return this.subJectDto;\n  }\n}\nAdapterSetvice.ɵfac = function AdapterSetvice_Factory(t) {\n  return new (t || AdapterSetvice)(i0.ɵɵinject(i1.ProxyService), i0.ɵɵinject(i2.TimeConverter));\n};\nAdapterSetvice.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdapterSetvice,\n  factory: AdapterSetvice.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AACA,SAAqBA,OAAO,QAAQ,MAAM;AAC1C,SAASC,QAAQ,QAAQ,qBAAqB;;;;AAQ9C,OAAM,MAAOC,cAAc;EAKzBC,YACUC,YAA0B,EAC1BC,oBAAmC;IADnC,iBAAY,GAAZD,YAAY;IACZ,yBAAoB,GAApBC,oBAAoB;IAJ9B,YAAO,GAAG,IAAIL,OAAO,EAAO;IAC5B,eAAU,GAAG,IAAIA,OAAO,EAAY;EAIjC;EACIM,cAAcA,CAACC,KAAa,EAAEC,QAAkB,EAAEC,KAAY;IACnE,IAAI,CAACL,YAAY,CACdM,oBAAoB,CAACH,KAAK,EAAEC,QAAQ,EAAEC,KAAK,CAAC,CAC5CE,SAAS,CAAEC,GAAG,IAAI;MACjB,IAAI,CAACC,OAAO,CAACC,IAAI,CAACF,GAAG,CAAC;IACxB,CAAC,CAAC;IACJ,OAAO,IAAI,CAACG,+BAA+B,EAAE;EAC/C;EACOA,+BAA+BA;IACpC,IAAIC,QAAa;IACjB,IAAI,CAACH,OAAO,CAACF,SAAS,CAAEM,GAAQ,IAAI;MAClCA,GAAG,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,SAAS,CAACC,GAAG,CAAEC,cAAc,IAC/C,IAAI,CAACjB,oBAAoB,CAACiB,cAAc,CAAC,CAC1C;MACDN,QAAQ,GAAG,IAAIf,QAAQ,CACrBgB,GAAG,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACI,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,EAC5CR,GAAG,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,SAAS,CAC9B;MACD,IAAI,CAACM,UAAU,CAACZ,IAAI,CAACE,QAAQ,CAAC;IAChC,CAAC,CAAC;IACF,OAAO,IAAI,CAACU,UAAU;EACxB;;AA9BWxB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAyB,SAAdzB,cAAc;EAAA0B,YAFb;AAAM","names":["Subject","ChartDto","AdapterSetvice","constructor","proxyService","timeConverterService","getStockValues","stock","interval","range","consultStockVaration","subscribe","res","subject","next","converterchartServiceToChartDto","chartDto","sub","chart","result","timestamp","map","timeUnformated","indicators","quote","open","subJectDto","factory","providedIn"],"sourceRoot":"","sources":["/Users/diegosantana/Documents/FrontEnd/FrontEndChallenge/src/acl/adapter/adapter.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Observable, Subject } from \"rxjs\";\nimport { ChartDto } from \"src/models/chartDto\";\nimport { Interval } from \"src/models/interval.enum\";\nimport { Range } from \"src/models/range.enum\";\nimport { TimeConverter } from \"src/utils/timeConverter\";\nimport { ProxyService } from \"../proxy/proxy.service\";\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AdapterSetvice {\n  private data: any;\n\n  subject = new Subject<any>();\n  subJectDto = new Subject<ChartDto>();\n  constructor(\n    private proxyService: ProxyService,\n    private timeConverterService: TimeConverter\n  ) {}\n  public getStockValues(stock: string, interval: Interval, range: Range) {\n    this.proxyService\n      .consultStockVaration(stock, interval, range)\n      .subscribe((res) => {\n        this.subject.next(res);\n      });\n    return this.converterchartServiceToChartDto();\n  }\n  public converterchartServiceToChartDto(): Observable<ChartDto> {\n    let chartDto: any;\n    this.subject.subscribe((sub: any) => {\n      sub.chart.result[0].timestamp.map((timeUnformated) =>\n        this.timeConverterService(timeUnformated)\n      );\n      chartDto = new ChartDto(\n        sub.chart.result[0].indicators.quote[0].open,\n        sub.chart.result[0].timestamp\n      );\n      this.subJectDto.next(chartDto);\n    });\n    return this.subJectDto;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}