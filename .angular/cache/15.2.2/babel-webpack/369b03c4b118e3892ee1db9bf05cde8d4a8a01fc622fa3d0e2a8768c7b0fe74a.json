{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { ChartDto } from \"src/models/chartDto\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../proxy/proxy.service\";\nexport class AdapterSetvice {\n  constructor(proxyService) {\n    this.proxyService = proxyService;\n    this.subject = new Subject();\n    this.subJectDto = new Subject();\n  }\n  getStockValues(stock, interval, range) {\n    this.proxyService.consultStockVaration(stock, interval, range).subscribe(res => {\n      this.subject.next(res);\n    });\n    return this.converterchartServiceToChartDto();\n  }\n  converterchartServiceToChartDto() {\n    let chartDto;\n    this.subject.subscribe(sub => {\n      chartDto = new ChartDto(sub.chart.result[0].indicators.quote[0].open, sub.chart.result[0].timestamp);\n    });\n    console.log(chartDto);\n    return chartDto;\n  }\n}\nAdapterSetvice.ɵfac = function AdapterSetvice_Factory(t) {\n  return new (t || AdapterSetvice)(i0.ɵɵinject(i1.ProxyService));\n};\nAdapterSetvice.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdapterSetvice,\n  factory: AdapterSetvice.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;AAC9B,SAASC,QAAQ,QAAQ,qBAAqB;;;AAO9C,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;IAFhC,YAAO,GAAG,IAAIJ,OAAO,EAAO;IAC5B,eAAU,GAAG,IAAIA,OAAO,EAAY;EACa;EAC1CK,cAAcA,CAACC,KAAa,EAAEC,QAAkB,EAAEC,KAAY;IACnE,IAAI,CAACJ,YAAY,CACdK,oBAAoB,CAACH,KAAK,EAAEC,QAAQ,EAAEC,KAAK,CAAC,CAC5CE,SAAS,CAAEC,GAAG,IAAI;MACjB,IAAI,CAACC,OAAO,CAACC,IAAI,CAACF,GAAG,CAAC;IACxB,CAAC,CAAC;IACJ,OAAO,IAAI,CAACG,+BAA+B,EAAE;EAC/C;EACOA,+BAA+BA;IACpC,IAAIC,QAAa;IACjB,IAAI,CAACH,OAAO,CAACF,SAAS,CAAEM,GAAG,IAAI;MAC7BD,QAAQ,GAAG,IAAId,QAAQ,CACrBe,GAAG,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,UAAU,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,EAC5CL,GAAG,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACI,SAAS,CAC9B;IACH,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;IAErB,OAAOA,QAAS;EAClB;;AAzBWb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAuB,SAAdvB,cAAc;EAAAwB,YAFb;AAAM","names":["Subject","ChartDto","AdapterSetvice","constructor","proxyService","getStockValues","stock","interval","range","consultStockVaration","subscribe","res","subject","next","converterchartServiceToChartDto","chartDto","sub","chart","result","indicators","quote","open","timestamp","console","log","factory","providedIn"],"sourceRoot":"","sources":["/Users/diegosantana/Documents/FrontEnd/FrontEndChallenge/src/acl/adapter/adapter.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { ChartDto } from \"src/models/chartDto\";\nimport { Interval } from \"src/models/interval.enum\";\nimport { Range } from \"src/models/range.enum\";\nimport { ProxyService } from \"../proxy/proxy.service\";\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AdapterSetvice {\n  private data: any;\n\n  subject = new Subject<any>();\n  subJectDto = new Subject<ChartDto>();\n  constructor(private proxyService: ProxyService) {}\n  public getStockValues(stock: string, interval: Interval, range: Range) {\n    this.proxyService\n      .consultStockVaration(stock, interval, range)\n      .subscribe((res) => {\n        this.subject.next(res);\n      });\n    return this.converterchartServiceToChartDto();\n  }\n  public converterchartServiceToChartDto(): ChartDto {\n    let chartDto: any;\n    this.subject.subscribe((sub) => {\n      chartDto = new ChartDto(\n        sub.chart.result[0].indicators.quote[0].open,\n        sub.chart.result[0].timestamp\n      );\n    });\n    console.log(chartDto);\n\n    return chartDto!;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}